{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { isInteger } from '../../utils/number';\n\nfunction baseFormatter(base) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  return function (n) {\n    if (n > Math.pow(2, 31) - 1 || n < -Math.pow(2, 31)) {\n      throw new Error('Value must be in range [-2^31, 2^31-1]');\n    }\n\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n < 0) {\n      n = n + Math.pow(2, 32);\n    }\n\n    return \"\".concat(prefix).concat(n.toString(base));\n  };\n}\n\nvar dependencies = ['typed'];\nexport function createBaseFormatterFactory(name, base) {\n  return factory(name, dependencies, function (_ref) {\n    var typed = _ref.typed;\n    return typed(name, {\n      number: baseFormatter(base)\n    });\n  });\n}","map":{"version":3,"sources":["/Users/mayankkanoria/Documents/Personal/calculator/node_modules/mathjs/es/function/string/baseUtils.js"],"names":["factory","isInteger","baseFormatter","base","prefixes","prefix","n","Math","pow","Error","concat","toString","dependencies","createBaseFormatterFactory","name","_ref","typed","number"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,QAAQ,GAAG;AACb,OAAG,IADU;AAEb,OAAG,IAFU;AAGb,QAAI;AAHS,GAAf;AAKA,MAAIC,MAAM,GAAGD,QAAQ,CAACD,IAAD,CAArB;AACA,SAAO,UAAUG,CAAV,EAAa;AAClB,QAAIA,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,IAAkB,CAAtB,IAA2BF,CAAC,GAAG,CAACC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAApC,EAAqD;AACnD,YAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,QAAI,CAACR,SAAS,CAACK,CAAD,CAAd,EAAmB;AACjB,YAAM,IAAIG,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,QAAIH,CAAC,GAAG,CAAR,EAAW;AACTA,MAAAA,CAAC,GAAGA,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAAR;AACD;;AAED,WAAO,GAAGE,MAAH,CAAUL,MAAV,EAAkBK,MAAlB,CAAyBJ,CAAC,CAACK,QAAF,CAAWR,IAAX,CAAzB,CAAP;AACD,GAdD;AAeD;;AAED,IAAIS,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,SAASC,0BAAT,CAAoCC,IAApC,EAA0CX,IAA1C,EAAgD;AACrD,SAAOH,OAAO,CAACc,IAAD,EAAOF,YAAP,EAAqB,UAAUG,IAAV,EAAgB;AACjD,QAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AACA,WAAOA,KAAK,CAACF,IAAD,EAAO;AACjBG,MAAAA,MAAM,EAAEf,aAAa,CAACC,IAAD;AADJ,KAAP,CAAZ;AAGD,GALa,CAAd;AAMD","sourcesContent":["import { factory } from '../../utils/factory';\nimport { isInteger } from '../../utils/number';\n\nfunction baseFormatter(base) {\n  var prefixes = {\n    2: '0b',\n    8: '0o',\n    16: '0x'\n  };\n  var prefix = prefixes[base];\n  return function (n) {\n    if (n > Math.pow(2, 31) - 1 || n < -Math.pow(2, 31)) {\n      throw new Error('Value must be in range [-2^31, 2^31-1]');\n    }\n\n    if (!isInteger(n)) {\n      throw new Error('Value must be an integer');\n    }\n\n    if (n < 0) {\n      n = n + Math.pow(2, 32);\n    }\n\n    return \"\".concat(prefix).concat(n.toString(base));\n  };\n}\n\nvar dependencies = ['typed'];\nexport function createBaseFormatterFactory(name, base) {\n  return factory(name, dependencies, function (_ref) {\n    var typed = _ref.typed;\n    return typed(name, {\n      number: baseFormatter(base)\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}