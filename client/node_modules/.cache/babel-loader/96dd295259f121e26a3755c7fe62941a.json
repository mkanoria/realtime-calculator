{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { isNumber } from '../../utils/is';\nimport { createRng } from './util/seededRNG';\nimport { flatten } from '../../utils/array';\nvar name = 'pickRandom';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createPickRandom = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on; // seeded pseudo random number generator\n\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array | Matrix} array     A one dimensional array\n   * @param {Int} number               An int or float\n   * @param {Array | Matrix} weights   An array of ints or floats\n   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.\n   *                                   Returns an array with the configured number of elements when number is > 1.\n   */\n\n\n  return typed({\n    'Array | Matrix': function ArrayMatrix(possibles) {\n      return _pickRandom(possibles);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {\n      return _pickRandom(possibles, number, undefined);\n    },\n    'Array | Matrix, Array': function ArrayMatrixArray(possibles, weights) {\n      return _pickRandom(possibles, undefined, weights);\n    },\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {\n      return _pickRandom(possibles, number, weights);\n    },\n    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {\n      return _pickRandom(possibles, number, weights);\n    }\n  });\n\n  function _pickRandom(possibles, number, weights) {\n    var single = typeof number === 'undefined';\n\n    if (single) {\n      number = 1;\n    }\n\n    possibles = flatten(possibles.valueOf()).valueOf(); // get Array\n\n    if (weights) {\n      weights = weights.valueOf(); // get Array\n    }\n\n    var totalWeights = 0;\n\n    if (typeof weights !== 'undefined') {\n      if (weights.length !== possibles.length) {\n        throw new Error('Weights must have the same length as possibles');\n      }\n\n      for (var i = 0, len = weights.length; i < len; i++) {\n        if (!isNumber(weights[i]) || weights[i] < 0) {\n          throw new Error('Weights must be an array of positive numbers');\n        }\n\n        totalWeights += weights[i];\n      }\n    }\n\n    var length = possibles.length;\n\n    if (length === 0) {\n      return [];\n    } else if (number >= length) {\n      return number > 1 ? possibles : possibles[0];\n    }\n\n    var result = [];\n    var pick;\n\n    while (result.length < number) {\n      if (typeof weights === 'undefined') {\n        pick = possibles[Math.floor(rng() * length)];\n      } else {\n        var randKey = rng() * totalWeights;\n\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n          randKey -= weights[_i];\n\n          if (randKey < 0) {\n            pick = possibles[_i];\n            break;\n          }\n        }\n      }\n\n      if (result.indexOf(pick) === -1) {\n        result.push(pick);\n      }\n    }\n\n    return single ? result[0] : result; // TODO: return matrix when input was a matrix\n    // TODO: add support for multi dimensional matrices\n  }\n});","map":{"version":3,"sources":["/Users/mayankkanoria/Documents/Personal/calculator/node_modules/mathjs/es/function/probability/pickRandom.js"],"names":["factory","isNumber","createRng","flatten","name","dependencies","createPickRandom","_ref","typed","config","on","rng","randomSeed","curr","prev","ArrayMatrix","possibles","_pickRandom","ArrayMatrixNumber","number","undefined","ArrayMatrixArray","weights","ArrayMatrixArrayMatrixNumber","ArrayMatrixNumberArrayMatrix","single","valueOf","totalWeights","length","Error","i","len","result","pick","Math","floor","randKey","_i","_len","indexOf","push"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory';\nimport { isNumber } from '../../utils/is';\nimport { createRng } from './util/seededRNG';\nimport { flatten } from '../../utils/array';\nvar name = 'pickRandom';\nvar dependencies = ['typed', 'config', '?on'];\nexport var createPickRandom = /* #__PURE__ */factory(name, dependencies, function (_ref) {\n  var typed = _ref.typed,\n      config = _ref.config,\n      on = _ref.on;\n  // seeded pseudo random number generator\n  var rng = createRng(config.randomSeed);\n\n  if (on) {\n    on('config', function (curr, prev) {\n      if (curr.randomSeed !== prev.randomSeed) {\n        rng = createRng(curr.randomSeed);\n      }\n    });\n  }\n  /**\n   * Random pick one or more values from a one dimensional array.\n   * Array elements are picked using a random function with uniform or weighted distribution.\n   *\n   * Syntax:\n   *\n   *     math.pickRandom(array)\n   *     math.pickRandom(array, number)\n   *     math.pickRandom(array, weights)\n   *     math.pickRandom(array, number, weights)\n   *     math.pickRandom(array, weights, number)\n   *\n   * Examples:\n   *\n   *     math.pickRandom([3, 6, 12, 2])                  // returns one of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], 2)               // returns an array of two of the values in the array\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1])    // returns one of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]) // returns an array of two of the values in the array with weighted distribution\n   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2) // returns an array of two of the values in the array with weighted distribution\n   *\n   * See also:\n   *\n   *     random, randomInt\n   *\n   * @param {Array | Matrix} array     A one dimensional array\n   * @param {Int} number               An int or float\n   * @param {Array | Matrix} weights   An array of ints or floats\n   * @return {number | Array}          Returns a single random value from array when number is 1 or undefined.\n   *                                   Returns an array with the configured number of elements when number is > 1.\n   */\n\n\n  return typed({\n    'Array | Matrix': function ArrayMatrix(possibles) {\n      return _pickRandom(possibles);\n    },\n    'Array | Matrix, number': function ArrayMatrixNumber(possibles, number) {\n      return _pickRandom(possibles, number, undefined);\n    },\n    'Array | Matrix, Array': function ArrayMatrixArray(possibles, weights) {\n      return _pickRandom(possibles, undefined, weights);\n    },\n    'Array | Matrix, Array | Matrix, number': function ArrayMatrixArrayMatrixNumber(possibles, weights, number) {\n      return _pickRandom(possibles, number, weights);\n    },\n    'Array | Matrix, number, Array | Matrix': function ArrayMatrixNumberArrayMatrix(possibles, number, weights) {\n      return _pickRandom(possibles, number, weights);\n    }\n  });\n\n  function _pickRandom(possibles, number, weights) {\n    var single = typeof number === 'undefined';\n\n    if (single) {\n      number = 1;\n    }\n\n    possibles = flatten(possibles.valueOf()).valueOf(); // get Array\n\n    if (weights) {\n      weights = weights.valueOf(); // get Array\n    }\n\n    var totalWeights = 0;\n\n    if (typeof weights !== 'undefined') {\n      if (weights.length !== possibles.length) {\n        throw new Error('Weights must have the same length as possibles');\n      }\n\n      for (var i = 0, len = weights.length; i < len; i++) {\n        if (!isNumber(weights[i]) || weights[i] < 0) {\n          throw new Error('Weights must be an array of positive numbers');\n        }\n\n        totalWeights += weights[i];\n      }\n    }\n\n    var length = possibles.length;\n\n    if (length === 0) {\n      return [];\n    } else if (number >= length) {\n      return number > 1 ? possibles : possibles[0];\n    }\n\n    var result = [];\n    var pick;\n\n    while (result.length < number) {\n      if (typeof weights === 'undefined') {\n        pick = possibles[Math.floor(rng() * length)];\n      } else {\n        var randKey = rng() * totalWeights;\n\n        for (var _i = 0, _len = possibles.length; _i < _len; _i++) {\n          randKey -= weights[_i];\n\n          if (randKey < 0) {\n            pick = possibles[_i];\n            break;\n          }\n        }\n      }\n\n      if (result.indexOf(pick) === -1) {\n        result.push(pick);\n      }\n    }\n\n    return single ? result[0] : result; // TODO: return matrix when input was a matrix\n    // TODO: add support for multi dimensional matrices\n  }\n});"]},"metadata":{},"sourceType":"module"}