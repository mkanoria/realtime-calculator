{"ast":null,"code":"import { evaluate, format } from \"mathjs\";\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"CLR\") {\n    obj.updateEquation([]);\n    obj.setTotal(0);\n  } else if (buttonName === \"DEL\") {\n    // Pop off the last added item into the array\n    obj.updateEquation(oldEquation => oldEquation.slice(0, -1));\n  } else if (buttonName === \"=\") {\n    // Create expression string\n    let expression = obj.equation.join(\"\"); // Reset equation\n\n    obj.updateEquation([]); // Evaluate expression\n\n    let result;\n\n    try {\n      result = evaluate(expression);\n      result = format(result, {\n        precision: 14\n      });\n    } catch (err) {\n      result = \"Invalid Expression!\";\n    }\n\n    console.log(\"Result is: \", result);\n    obj.setTotal(result); // Make expression prettier for display\n\n    expression = expression.concat(\"=\", result);\n    return expression;\n  } else {\n    // If there's more elements being added to the equation, then reset the total\n    obj.updateEquation(oldEquation => [...oldEquation, buttonName]);\n    obj.setTotal(0);\n  }\n\n  return \"\";\n}","map":{"version":3,"sources":["/Users/mayankkanoria/Documents/Personal/calculator/src/operations/calculate.js"],"names":["evaluate","format","calculate","obj","buttonName","updateEquation","setTotal","oldEquation","slice","expression","equation","join","result","precision","err","console","log","concat"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,QAAjC;AAEA,eAAe,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,UAAxB,EAAoC;AACjD,MAAIA,UAAU,KAAK,KAAnB,EAA0B;AACxBD,IAAAA,GAAG,CAACE,cAAJ,CAAmB,EAAnB;AACAF,IAAAA,GAAG,CAACG,QAAJ,CAAa,CAAb;AACD,GAHD,MAGO,IAAIF,UAAU,KAAK,KAAnB,EAA0B;AAC/B;AACAD,IAAAA,GAAG,CAACE,cAAJ,CAAoBE,WAAD,IAAiBA,WAAW,CAACC,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAApC;AACD,GAHM,MAGA,IAAIJ,UAAU,KAAK,GAAnB,EAAwB;AAC7B;AACA,QAAIK,UAAU,GAAGN,GAAG,CAACO,QAAJ,CAAaC,IAAb,CAAkB,EAAlB,CAAjB,CAF6B,CAG7B;;AACAR,IAAAA,GAAG,CAACE,cAAJ,CAAmB,EAAnB,EAJ6B,CAK7B;;AACA,QAAIO,MAAJ;;AACA,QAAI;AACFA,MAAAA,MAAM,GAAGZ,QAAQ,CAACS,UAAD,CAAjB;AACAG,MAAAA,MAAM,GAAGX,MAAM,CAACW,MAAD,EAAS;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAT,CAAf;AACD,KAHD,CAGE,OAAOC,GAAP,EAAY;AACZF,MAAAA,MAAM,GAAG,qBAAT;AACD;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,MAA3B;AACAT,IAAAA,GAAG,CAACG,QAAJ,CAAaM,MAAb,EAd6B,CAe7B;;AACAH,IAAAA,UAAU,GAAGA,UAAU,CAACQ,MAAX,CAAkB,GAAlB,EAAuBL,MAAvB,CAAb;AACA,WAAOH,UAAP;AACD,GAlBM,MAkBA;AACL;AACAN,IAAAA,GAAG,CAACE,cAAJ,CAAoBE,WAAD,IAAiB,CAAC,GAAGA,WAAJ,EAAiBH,UAAjB,CAApC;AACAD,IAAAA,GAAG,CAACG,QAAJ,CAAa,CAAb;AACD;;AACD,SAAO,EAAP;AACD","sourcesContent":["import { evaluate, format } from \"mathjs\";\n\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"CLR\") {\n    obj.updateEquation([]);\n    obj.setTotal(0);\n  } else if (buttonName === \"DEL\") {\n    // Pop off the last added item into the array\n    obj.updateEquation((oldEquation) => oldEquation.slice(0, -1));\n  } else if (buttonName === \"=\") {\n    // Create expression string\n    let expression = obj.equation.join(\"\");\n    // Reset equation\n    obj.updateEquation([]);\n    // Evaluate expression\n    let result;\n    try {\n      result = evaluate(expression);\n      result = format(result, { precision: 14 });\n    } catch (err) {\n      result = \"Invalid Expression!\";\n    }\n    console.log(\"Result is: \", result);\n    obj.setTotal(result);\n    // Make expression prettier for display\n    expression = expression.concat(\"=\", result);\n    return expression;\n  } else {\n    // If there's more elements being added to the equation, then reset the total\n    obj.updateEquation((oldEquation) => [...oldEquation, buttonName]);\n    obj.setTotal(0);\n  }\n  return \"\";\n}\n"]},"metadata":{},"sourceType":"module"}